keywords: ["blip", "lua", "luau", "camera", "view", "perspective", "position", "rotation", "field of view", "3d"]
type: "Camera"
extends: "Object"
description: |
  A `Camera` is an object that can be placed in the scene to render all or select elements based on their layers.

  The global instance `Camera` corresponds to the default main camera that renders to fullscreen. Additional cameras are rendered on top, according to their view order. Their output can optionally be displayed inside a custom screen rectangle, called a target.

  All camera modes listed on this page are implemented in Lua, it's totally possible to implement custom ones.

  Code examples of `Camera`'s various fields can be found in the following worlds,
  - `Camera Projection Modes`
  - `Radar FX Example`
  - `Multi Camera UI Example`
  - `Minimap Example`

properties:
    - name: "FieldOfView"
      type: "number"
      description: |
          Can be set to change Camera's minimum field of view, default value is 60 degrees.

          The minimum field of view equates to the vertical field of view in landscape, or to the horizontal field of view in portrait. This is to ensure a consistent look&feel between screen orientations or aspect ratios.

      samples:
        - code: |
            Camera.FieldOfView = 40.0

    - name: "FOV"
      type: "number"
      description: |
          Shortcut to [Camera.FieldOfView](#property-fieldofview).
    
    - name: "VerticalFOV"
      read-only: true
      type: "number"
      description: |
          Returns the vertical field of view, depending on current screen orientation. This is based on the minimum field of view [FieldOfView](#property-fieldofview).
    
    - name: "HorizontalFOV"
      read-only: true
      type: "number"
      description: |
          Returns the horizontal field of view, depending on current screen orientation. This is based on the minimum field of view [FieldOfView](#property-fieldofview).

    - name: "Layers"
      type: "table"
      description: |
          Integer or table of integers between 1 and 12. Only objects in one of the specified layers are rendered by the camera.

    - name: "Width"
      type: "number"
      description: |
          Width of the camera projection.

    - name: "Height"
      type: "number"
      description: |
          Height of the camera projection.

    - name: "Near"
      type: "number"
      description: |
          Near plane of the camera projection.

    - name: "Far"
      type: "number"
      description: |
          Far plane of the camera projection.

    - name: "Projection"
      type: "ProjectionMode"
      description: |
          The projection mode can be one of `ProjectionMode.Perspective` (by default) or `ProjectionMode.Orthographic`.

          Note that it can be changed at any time.

    - name: "TargetX"
      type: "number"
      description: |
          X component of the camera screen target bottom-left corner, expressed in screen points.

    - name: "TargetY"
      type: "number"
      description: |
          Y component of the camera screen target bottom-left corner, expressed in screen points.

    - name: "TargetWidth"
      type: "number"
      description: |
          Width of the camera screen target, expressed in screen points.

    - name: "TargetHeight"
      type: "number"
      description: |
          Height of the camera screen target, expressed in screen points.

    - name: "Color"
      type: "Color"
      description: |
          Multiplicative color applied on camera final render.

    - name: "Alpha"
      type: "number"
      description: |
          Shortcut to [Camera.Color](#property-color) alpha.

    - name: "ViewOrder"
      type: "integer"
      description: |
          Integer between 1 and 255 used to order multiple cameras. Additional cameras created in Lua have a default value of `127`. The main `Camera` provided by Cubzh engine has a default value of `0`.

          Note that as of version `0.1.1`, setting an orthographic camera's view order to be rendered before a perspective camera will make it use render scaling instead of points scaling (see [Camera](reference/camera)). This may be addressed in future updates.

    - name: "On"
      type: "boolean"
      description: |
          Whether the camera is active or not.

functions:
    - name: "CastRay"
      argument-sets: 
        -
        -
          - name: "filterIn"
            type: "CollisionGroups"
        -
          - name: "filterIn"
            type: "Shape"
        -
          - name: "filterIn"
            type: "nil"
          - name: "filterOut"
            type: "Object"
        -
          - name: "filterIn"
            type: "CollisionGroups"
          - name: "filterOut"
            type: "Object"
        -
          - name: "filterIn"
            type: "Shape"
          - name: "filterOut"
            type: "Object"
      return: 
        - type: "Impact" 
      description: |
          Casts a ray and returns an [Impact] (can be [nil]).

          The [Impact] contains information about the kind of thing that's been hit.

          ðŸ’¡ Calls [Ray].[Cast](/reference/ray#functions-cast) under the hood. See [Ray].[Cast](/reference/ray#functions-cast) definition for more details about possible filters.
      samples:
        - code: |
            local impact = Camera:CastRay()
            if impact.Block ~= nil then
              print("block hit:", impact.Block)
            end

    - name: "SetModeFirstPerson"
      argument-sets: 
        -
        -
          - name: "target"
            type: "Object"
        -
          - name: "target"
            type: "Object"
          - name: "offset"
            type: "number"
        -
          - name: "target"
            type: "Object"
          - name: "offset"
            type: "Number3"
      description: |
          Puts Camera in "first person" mode. Looking at the world from `target`'s perspective.

          When calling `SetModeFirstPerson` without parameters, the target defaults to [Player] (local player).

          When `offset` is set to an [number], the offset is set on the vertical axis only, (`Number3(0, offset, 0)`) 

      samples:
        - code: |
            Camera:SetModeFirstPerson(Player, 3.0)

    - name: "SetModeThirdPerson"
      arguments: 
        - name: "config"
          type: "table"
          optional: true
      description: |
          Puts Camera in "third person" mode, looking at target from behind, moving and rotating with it.

          When called without `config` parameter, the `target` defaults to [Player] (local player).

          The Camera always tries to back away from the target to reach the `config.distance` value but might collide with other objects and then stop at the collision point.

          Mouse wheel or pinch in/out gesture with a touch screen can be used to move the camera closer or farther from the target, while constrained between `config.minDistance` and `config.maxDistance`.

      samples:
        - code: |
            Camera:SetModeThirdPerson()

            Camera:SetModeThirdPerson({ target = someShape })

            -- default config:
            local defaultConfig ={
              showPointer = true,
              distance = 40,
              minDistance = 0,
              maxDistance = 75,
              camera = Camera,
              target = Player,
              offset = nil, -- (Number3)
              rigidity = 0.5,
              collidesWithGroups = Map.CollisionGroups,
              rotatesWithTarget = true,
            }

    - name: "SetModeSatellite"
      arguments:
        - name: "config"
          type: "table"
          optional: true
      description: |
          Puts Camera in "satellite" mode, rotating around its target while maintaining its distance.

          When called without `config` parameter, the target defaults to the current position of the camera.

          The `config` table can contain the following fields:
          - `target`: ([Object] or [Number3]) The target to orbit around
          - `distance`: (number) Distance from target, defaults to current distance
          - `camera`: ([Camera]) Camera instance, defaults to main Camera

          Once the "satellite mode" is set, [Camera.LocalRotation](#property-localrotation) can be used to rotate around the target.

      samples:
        - code: |
            Camera:SetModeSatellite()

            Camera:SetModeSatellite({ 
              target = Player,
              distance = 10.0
            })

    - name: "FitToScreen"
      description: |
          Fits the given [Shape] or [Box] to the screen, taking into account the camera's [Projection](#property-projection) mode. This function moves the camera back until the target fits on screen.

          For example, to fit an object at the center of the screen, first have the camera look at the target (`camera.Forward = target.Position - camera.Position`) before calling this function.

          Optional parameters:
          - `coverage` indicates how much of the screen should be covered by the target. You can use this to adjust the fit, increasing this value will effectively zoom in on the target, decreasing it will zoom out.
          - `orientation` may be used to force the use of a single dimension, instead of automatically choosing the limiting dimension. Valid values are "vertical" or "horizontal".
      argument-sets:
        -
          - name: "target"
            type: "Shape"
          - name: "options"
            type: "table"
            optional: true
      samples:
        - code: |
            -- make the camera look at the shape
            Camera.Forward = myShape.Position - Camera.Position

            -- make the shape's bounding box cover approximately 60% of the screen, depending on perspective
            Camera:FitToScreen(myShape, { coverage=0.6 })
    
    - name: "WorldToScreen"
      description: |
          Converts a world point to an unsigned normalized screen point (between 0.0 and 1.0) through this camera projection.
      arguments: 
        - name: "point"
          type: "Number3"
      return:
        - type: "Number2"
    
    - name: "ScreenToRay"
      description: |
          Converts an unsigned normalized screen point (between 0.0 and 1.0) into a world [Ray] through this camera projection.
      arguments: 
        - name: "point"
          type: "Number2"
      return:
        - type: "Ray"

